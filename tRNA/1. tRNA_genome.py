import subprocess
import pandas as pd

# Input FASTA file containing genome sequences
input_fasta = "/home/enyaa/gene_genome/e_coli.fasta"
output_file = "/home/enyaa/gene_genome/e_coli_trnascan_results.txt"
file = "<Codon> <3-letter AA abbreviation> <One letter AA abrev>"

'''# Run tRNAscan-SE
command = ["tRNAscan-SE", "-B", "-o", output_file, input_fasta] #-N output corresponding codon instead of anti-codon

try:
    subprocess.run(command, check=True)
    print(f"tRNAscan-SE completed successfully. Results saved to {output_file}")
except subprocess.CalledProcessError as e:
    print(f"Error running tRNAscan-SE: {e}")
    
'''
tRNA_df = pd.read_csv(output_file, sep="\t", comment="#", skiprows=3, header=None)
tRNA_df.columns = ["Sequence_name", "tRNA_nr", "Begin", "End", "tRNA_type", "Anticodon", "Intron_begin", "Intron_end", "Score", "Comment"]
#print(tRNA_df.head())
tRNA_counts = tRNA_df["tRNA_type"].value_counts()
anticodon_counts_df = tRNA_df["Anticodon"].value_counts().reset_index()
anticodon_counts_df.columns = ["Anticodon", "Genome_count"] 

#print(anticodon_counts_df)


#### GENE ---------
from collections import Counter
from Bio.Seq import Seq
import re
NDM6_seqeunce = """ATGGAATTGCCCAATATTATGCACCCGGTCGCGAAGCTGAGCACCGCATTAGCCGCTGCA
TTGATGCTGAGCGGGTGCATGCCCGGTGAAATCCGCCCGACGATTGGCCAGCAAATGGAA
ACTGGCGACCAACGGTTTGGCGATCTGGTTTTCCGCCAGCTCGCACCGAATGTCTGGCAG
CACACTTCCTATCTCGACATGCCGGGTTTCGGGGCAGTCGCTTCCAACGGTTTGATCGTC
AGGGATGGCGGCCGCGTGCTGGTGGTCGATACCGCCTGGACCGATGACCAGACCGCCCAG
ATCCTCAACTGGATCAAGCAGGAGATCAACCTGCCGGTCGCGCTGGCGGTGGTGACTCAC
GCGCATCAGGACAAGATGGGCGGTATGGACGCGCTGCATGCGGCGGGGATTGCGACTTAT
GCCAATGCGTTGTCGAACCAGCTTGCCCCGCAAGAGGGGATGGTTGCGGCGCAACACAGC
CTGACTTTCGCCGCCAATGGCTGGGTCGAACCAGCAACCGCGCCCAACTTTGGCCCGCTC
AAGGTATTTTACCCCGGCCCCGGCCACACCAGTGACAATATCACCGTTGGGATCGACGGC
ACCGACATCGCTTTTGGTGGCTGCCTGATCAAGGACAGCAAGGCCAAGTCGCTCGGCAAT
CTCGGTGATGCCGACACTGAGCACTACGCCGCGTCAGTGCGCGCGTTTGGTGCGGCGTTC
CCCAAGGCCAGCATGATCGTGATGAGCCATTCCGCCCCCGATAGCCGCGCCGCAATCACT
CATACGGCCCGCATGGCCGACAAGCTGCGCTGA"""

tetQ_seq = """GTGCGTTTCGACAATGCATCTATTGTAGTATATTATTGCTTAATCCAAATGAATATTATAAATTTAGGAATTCTTGCTCACATTGATGCA
GGAAAAACTTCCGTAACCGAGAATCTGCTGTTTGCCAGTGGAGCAACGGAAAAGTGCGGCCGTGTGGATAATGGTGACACCATAACAGAC
TCTATGGATATAGAGAAACGTAGAGGAATTACTGTTCGGGCTTCTACGACATCTATTATCTGGAATGGAGTGAAATGCAATATCATTGAC
ACTCCGGGACACATGGATTTTATTGCGGAAGTGGAGCGGACATTCAAAATGCTTGATGGAGCAGTCCTCATCTTATCCGCAAAGGAAGGC
ATACAAGCGCAAACAAAGTTGCTGTTCAATACTTTACAAAAACTGCAAATCCCGACAATTATATTTATCAATAAAATTGACCGTGACGGT
GTGAATTTAGAGCGTTTGTATCTGGATATAAAAACAAATCTGTCTCAAGATGTCCTGTTTATGCAAACTGTTGTCGATGGATTGGTTTAT
CCGATTTGCTCCCAAACATATATAAAGGAAGAATACAAAGAATTTGTATGCAACCATGACGACAATATATTAGAACGATATTTGGCGGAT
AGCGAAATTTCACCGGCTGATTATTGGAATACGATAATCGATCTTGTGGCAAAAGCCAAAGTCTATCCGGTACTACATGGATCAGCAATG
TTCAATATCGGTATCAATGAGTTGTTGGACGCCATCTCTTCTTTTATACTTCCTCCAGAATCAGTCTCAAACAGACTTTCAGCTTATCTC
TATAAGATAGAGCATGACCCCAAAGGACATAAAAGAAGTTTTCTAAAAATAATTGACGGAAGTCTGAGACTTCGAGACATTGTAAGAATC
AACGATTCGGAAAAATTCATCAAGATTAAAAATCTAAAGACTATTTATCAGGGCAGAGAGATAAATGTTGATGAAGTGGGGGCCAATGAT
ATCGCGATTGTAGAAGATATGGAAGATTTTCGAATCGGAGATTATTTAGGTACTAAACCTTGTTTGATTCAAGGGTTATCTCATCAGCAT
CCCGCTCTCAAATCCTCCGTCCGGCCAGACAGGTCCGAAGAGAGAAGCAAGGTGATATCCGCTCTGAATACATTGTGGATTGAAGACCCG
TCTTTGTCCTTTTCCATAAACTCATATAGTGATGAATTGGAAATCTCGTTATATGGTTTGACACAAAAGGAAATCATACAGACATTGCTG
GAAGAACGATTTTCCGTAAAGGTCCATTTTGATGAGATCAAGACTATCTACAAAGAACGACCTGTAAAAAAGGTCAATAAGATTATTCAG
ATCGAAGTGCCACCCAACCCTTACTGGGCCACAATAGGGCTGACGCTTGAACCCTTGCCGTTAGGGACAGGGTTGCAAATCGAAAGTGAC
ATCTCCTATGGTTATCTGAACCATTCTTTTCAAAATGCCGTTTTTGAAGGGATTCGTATGTCTTGCCAATCTGGTTTACATGGATGGGAA
GTGACTGATCTGAAAGTAACTTTTACTCAAGCCGAGTATTATAGCCCGGTAAGTACACCTGCTGATTTCAGACAGCTGACCCCTTATGTC
TTCAGGCTGGCCTTGCAACAGTCAGGTGTGGACATTCTCGAACCGATGCTCTATTTTGAGTTGCAGATACCCCAAGCGGCAAGTTCCAAA
GCTATTACAGATTTGCAAAAAATGATGTCTGAGATTGAAGACATCAGTTGCAATAATGAGTGGTGTCATATTAAAGGGAAAGTTCCATTA
AATACAAGTAAAGACTACGCCTCAGAAGTAAGTTCATACACTAAGGGCTTAGGCGTTTTTATGGTCAAGCCATGCGGGTATCAAATAACA
AAAGGCGATTATTCTGATAATATCCGCATGAACGAAAAAGATAAACTTTTATTCATGTTCCAAAAATCAATGTCATCAAAATAA"""

def count_anticodons(sequence):
    # Remove everything that isn't a base
    sequence = re.sub(r'[^ATGC]', '', sequence.upper()) 
    # Find codons
    codons = [sequence[i:i+3] for i in range(0, len(sequence), 3)]
    
    # Convert to anticodns using reverse complement
    anticodons = [str(Seq(codon).reverse_complement()) for codon in codons]
    
    # Count anticodons
    anticodon_counts = Counter(anticodons)
    
    anticodon_df = pd.DataFrame(anticodon_counts.items(), columns=["Anticodon", "Gene_count"])

    # Return the counts of anticodons
    return anticodon_df
    

NDM6_anticodons = count_anticodons(NDM6_seqeunce)
tetQ_anticodons = count_anticodons(tetQ_seq)
#print(NDM6_anticodons)

compare_df = tetQ_anticodons.merge(anticodon_counts_df, on=['Anticodon'], how='outer').fillna(0)
compare_df['Genome_count'] = compare_df['Genome_count'].astype(int)
compare_df['Gene_count'] = compare_df['Gene_count'].astype(int)

print(compare_df.head(30))
print(compare_df.tail(34))